// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* tslint:disable */
/* eslint-disable */
import {
  default as BeatLabel1,
  default as BeatLabel2,
  default as BeatLabel3,
  default as BeatLabel4,
  default as BeatLabel5,
  default as BeatLabel6,
  default as BeatLabel7,
  default as BeatLabel8,
  default as BeatLabel9,
  default as BeatLabel10,
  default as BeatLabel101,
  default as BeatLabel1011,
  default as BeatLabel10111,
  default as BeatLabel101111,
  default as BeatLabel1011111,
  default as BeatLabel10111111,
} from "./Components/Editor/Track/BeatLabel";
import React from "react";
export interface CommonProps<T extends HTMLElement> {
  className?: string;
  style?: React.CSSProperties;
  innerRef?: React.MutableElementRef<T> | React.RefCallback<T>;
  tabIndex?: number;
  role?: string;
  testId?: string;
  disabled?: boolean;
  onAuxClick?: React.MouseEventHandler<T>;
  onAuxClickCapture?: React.MouseEventHandler<T>;
  onClick?: React.MouseEventHandler<T>;
  onClickCapture?: React.MouseEventHandler<T>;
  onContextMenu?: React.MouseEventHandler<T>;
  onContextMenuCapture?: React.MouseEventHandler<T>;
  onDoubleClick?: React.MouseEventHandler<T>;
  onDoubleClickCapture?: React.MouseEventHandler<T>;
  onDrag?: React.DragEventHandler<T>;
  onDragCapture?: React.DragEventHandler<T>;
  onDragEnd?: React.DragEventHandler<T>;
  onDragEndCapture?: React.DragEventHandler<T>;
  onDragEnter?: React.DragEventHandler<T>;
  onDragEnterCapture?: React.DragEventHandler<T>;
  onDragExit?: React.DragEventHandler<T>;
  onDragExitCapture?: React.DragEventHandler<T>;
  onDragLeave?: React.DragEventHandler<T>;
  onDragLeaveCapture?: React.DragEventHandler<T>;
  onDragOver?: React.DragEventHandler<T>;
  onDragOverCapture?: React.DragEventHandler<T>;
  onDragStart?: React.DragEventHandler<T>;
  onDragStartCapture?: React.DragEventHandler<T>;
  onDrop?: React.DragEventHandler<T>;
  onDropCapture?: React.DragEventHandler<T>;
  onMouseDown?: React.MouseEventHandler<T>;
  onMouseDownCapture?: React.MouseEventHandler<T>;
  onMouseEnter?: React.MouseEventHandler<T>;
  onMouseLeave?: React.MouseEventHandler<T>;
  onMouseMove?: React.MouseEventHandler<T>;
  onMouseMoveCapture?: React.MouseEventHandler<T>;
  onMouseOut?: React.MouseEventHandler<T>;
  onMouseOutCapture?: React.MouseEventHandler<T>;
  onMouseOver?: React.MouseEventHandler<T>;
  onMouseOverCapture?: React.MouseEventHandler<T>;
  onMouseUp?: React.MouseEventHandler<T>;
  onMouseUpCapture?: React.MouseEventHandler<T>;
  onTouchCancel?: React.TouchEventHandler<T>;
  onTouchCancelCapture?: React.TouchEventHandler<T>;
  onTouchEnd?: React.TouchEventHandler<T>;
  onTouchEndCapture?: React.TouchEventHandler<T>;
  onTouchMove?: React.TouchEventHandler<T>;
  onTouchMoveCapture?: React.TouchEventHandler<T>;
  onTouchStart?: React.TouchEventHandler<T>;
  onTouchStartCapture?: React.TouchEventHandler<T>;
  onPointerDown?: React.PointerEventHandler<T>;
  onPointerDownCapture?: React.PointerEventHandler<T>;
  onPointerMove?: React.PointerEventHandler<T>;
  onPointerMoveCapture?: React.PointerEventHandler<T>;
  onPointerUp?: React.PointerEventHandler<T>;
  onPointerUpCapture?: React.PointerEventHandler<T>;
  onPointerCancel?: React.PointerEventHandler<T>;
  onPointerCancelCapture?: React.PointerEventHandler<T>;
  onPointerEnter?: React.PointerEventHandler<T>;
  onPointerLeave?: React.PointerEventHandler<T>;
  onPointerOver?: React.PointerEventHandler<T>;
  onPointerOverCapture?: React.PointerEventHandler<T>;
  onPointerOut?: React.PointerEventHandler<T>;
  onPointerOutCapture?: React.PointerEventHandler<T>;
  onGotPointerCapture?: React.PointerEventHandler<T>;
  onGotPointerCaptureCapture?: React.PointerEventHandler<T>;
  onLostPointerCapture?: React.PointerEventHandler<T>;
  onLostPointerCaptureCapture?: React.PointerEventHandler<T>;
  onScroll?: React.UIEventHandler<T>;
  onScrollCapture?: React.UIEventHandler<T>;
  onWheel?: React.WheelEventHandler<T>;
  onWheelCapture?: React.WheelEventHandler<T>;
  onKeyDown?: React.KeyboardEventHandler<T>;
  onKeyDownCapture?: React.KeyboardEventHandler<T>;
  onKeyPress?: React.KeyboardEventHandler<T>;
  onKeyPressCapture?: React.KeyboardEventHandler<T>;
  onKeyUp?: React.KeyboardEventHandler<T>;
  onKeyUpCapture?: React.KeyboardEventHandler<T>;
  onFocus?: React.FocusEventHandler<T>;
  onFocusCapture?: React.FocusEventHandler<T>;
  onBlur?: React.FocusEventHandler<T>;
  onBlurCapture?: React.FocusEventHandler<T>;
}
const ExampleMarkers: {
  (
    props: {
      BeatLabel1?: React.ReactNode;
      BeatLabel2?: React.ReactNode;
      BeatLabel3?: React.ReactNode;
      BeatLabel4?: React.ReactNode;
      BeatLabel5?: React.ReactNode;
      BeatLabel6?: React.ReactNode;
      BeatLabel7?: React.ReactNode;
      BeatLabel8?: React.ReactNode;
      BeatLabel9?: React.ReactNode;
      BeatLabel10?: React.ReactNode;
      BeatLabel101?: React.ReactNode;
      BeatLabel1011?: React.ReactNode;
      BeatLabel10111?: React.ReactNode;
      BeatLabel101111?: React.ReactNode;
      BeatLabel1011111?: React.ReactNode;
      BeatLabel10111111?: React.ReactNode;
    } & CommonProps<HTMLDivElement>
  ): JSX.Element;
  BeatLabel1: typeof BeatLabel1;
  BeatLabel2: typeof BeatLabel2;
  BeatLabel3: typeof BeatLabel3;
  BeatLabel4: typeof BeatLabel4;
  BeatLabel5: typeof BeatLabel5;
  BeatLabel6: typeof BeatLabel6;
  BeatLabel7: typeof BeatLabel7;
  BeatLabel8: typeof BeatLabel8;
  BeatLabel9: typeof BeatLabel9;
  BeatLabel10: typeof BeatLabel10;
  BeatLabel101: typeof BeatLabel101;
  BeatLabel1011: typeof BeatLabel1011;
  BeatLabel10111: typeof BeatLabel10111;
  BeatLabel101111: typeof BeatLabel101111;
  BeatLabel1011111: typeof BeatLabel1011111;
  BeatLabel10111111: typeof BeatLabel10111111;
};
export default ExampleMarkers;
